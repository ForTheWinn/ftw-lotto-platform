{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-privatekey/components/encrypt-privatekey/index.tsx"],"names":["EncryptPrivateKey","privateKey","onEncrypt","useState","password","setPassword","isLoading","setLoading","error","setError","encrypt","Neon","create","account","then","provider","encryptedKey","encrypted","address","catch","e","message","className","value","onChange","val","onKeyDown","onClose","disabled","onClick","type"],"mappings":"kMA8EeA,UA/DW,SAAC,GAGG,IAF5BC,EAE2B,EAF3BA,WACAC,EAC2B,EAD3BA,UAC2B,EACKC,mBAAS,IADd,mBACpBC,EADoB,KACVC,EADU,OAEKF,oBAAS,GAFd,mBAEpBG,EAFoB,KAETC,EAFS,OAGDJ,mBAAS,IAHR,mBAGpBK,EAHoB,KAGbC,EAHa,KAIrBC,EAAU,WACdH,GAAW,GACKI,IAAKC,OAAOC,QAAQZ,GAEjCS,QAAQN,GACRU,MAAK,SAAAD,GACJN,GAAW,GACXL,EAAU,CACRa,SAAU,QACVC,aAAcH,EAAQI,UACtBC,QAASL,EAAQK,QACjBjB,aACAG,gBAGHe,OAAM,SAAAC,GACLX,EAASW,EAAEC,SACXd,GAAW,OAIjB,OACE,oCACE,yBAAKe,UAAU,SACb,yBAAKA,UAAU,SAAf,YACA,kBAAC,UAAD,CACEC,MAAOnB,EACPoB,SAAU,SAAAC,GAAG,OAAIpB,EAAYoB,IAC7BC,UAAW,WACLtB,GACFM,QAMR,yBAAKY,UAAU,qBACb,4BACE,4EACA,oFAGJ,6BACCd,GAAS,kBAAC,UAAD,CAAca,QAASb,EAAOmB,QAAS,kBAAMlB,EAAS,OAChE,4BACEmB,UAAWxB,EACXyB,QAASnB,EACToB,KAAK,SACLR,UAAS,4BAAuBhB,EAAY,aAAe,KAJ7D","file":"static/js/6.f1b1e182.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Neon from \"@cityofzion/neon-js\";\nimport PasswordInput from \"../../../../components/password-input\";\nimport DisplayError from \"../../../../components/display-error\";\nimport { CurrentWalletProps } from \"../../../../../../../../../types\";\n\ninterface NewWalletProps extends CurrentWalletProps {\n  password: string;\n}\n\ninterface VerifyPrivateKeyProps {\n  privateKey: string;\n  onEncrypt: (wallet: NewWalletProps) => void;\n}\n\nconst EncryptPrivateKey = ({\n  privateKey,\n  onEncrypt,\n}: VerifyPrivateKeyProps) => {\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const encrypt = () => {\n    setLoading(true);\n    const account = Neon.create.account(privateKey);\n    account\n      .encrypt(password)\n      .then(account => {\n        setLoading(false);\n        onEncrypt({\n          provider: \"LOCAL\",\n          encryptedKey: account.encrypted,\n          address: account.address,\n          privateKey,\n          password,\n        });\n      })\n      .catch(e => {\n        setError(e.message);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <div className=\"field\">\n        <div className=\"label\">Password</div>\n        <PasswordInput\n          value={password}\n          onChange={val => setPassword(val)}\n          onKeyDown={() => {\n            if (password) {\n              encrypt();\n            }\n          }}\n        />\n      </div>\n\n      <div className=\"is-size-7 content\">\n        <ul>\n          <li>Password must be at least 6 characters long.</li>\n          <li>You will need this password to unlock your wallet.</li>\n        </ul>\n      </div>\n      <hr />\n      {error && <DisplayError message={error} onClose={() => setError(\"\")} />}\n      <button\n        disabled={!password}\n        onClick={encrypt}\n        type=\"button\"\n        className={`button is-primary ${isLoading ? \"is-loading\" : \"\"}`}\n      >\n        Encrypt!\n      </button>\n    </>\n  );\n};\n\nexport default EncryptPrivateKey;\n"],"sourceRoot":""}