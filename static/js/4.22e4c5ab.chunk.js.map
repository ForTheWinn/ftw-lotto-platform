{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/saved-wallets/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/saved-wallets/components/form.tsx"],"names":["ValidateSchema","Yup","shape","password","required","SavedWallets","withFormik","mapPropsToValues","props","encryptedKey","savedWallets","length","validationSchema","handleSubmit","values","setSubmitting","setStatus","Neon","create","account","decrypt","then","onConnected","provider","address","privateKey","encrypted","catch","e","error","message","Form","isSubmitting","setFieldValue","submitForm","status","className","onBlur","target","value","map","item","key","onKeyDown","onChange","val","onClose","undefined","disabled","type"],"mappings":"mIAAA,oDAUMA,EAAiBC,MAAaC,MAAM,CACxCC,SAAUF,MAAaG,SAAS,cAG5BC,EAAeC,YAMnB,CACAC,iBAAkB,SAACC,GACjB,MAAO,CACLC,aACED,EAAME,cAAgBF,EAAME,aAAaC,OAAS,EAC9CH,EAAME,aAAa,GAAGD,aACtB,GACNN,SAAU,KAGdS,iBAAkBZ,EAClBa,aAAc,SAACC,EAAD,GAA8D,IAAvCN,EAAsC,EAAtCA,MAAOO,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACzCC,IAAKC,OAAOC,QAAQL,EAAOL,cAExCW,QAAQN,EAAOX,UACfkB,MAAK,SAAAF,GACJJ,GAAc,GACdP,EAAMc,YAAY,CAChBC,SAAU,QACVC,QAASL,EAAQK,QACjBC,WAAYN,EAAQM,WACpBhB,aAAcU,EAAQO,eAGzBC,OAAM,SAAAC,GACLb,GAAc,GACdC,EAAU,CAAEa,MAAOD,EAAEE,eAhCRxB,CAmClByB,WAEY1B,a,iCCnDf,mDAiEe0B,UA1DF,SACXvB,GACI,IAEFE,EAOEF,EAPFE,aACAsB,EAMExB,EANFwB,aACAlB,EAKEN,EALFM,OACAmB,EAIEzB,EAJFyB,cACAC,EAGE1B,EAHF0B,WACAC,EAEE3B,EAFF2B,OACAnB,EACER,EADFQ,UAEF,OACE,kBAAC,IAAD,KACE,yBAAKoB,UAAU,SACb,yBAAKA,UAAU,SAAf,iBACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,uBACb,4BAAQC,OAAQ,SAAAT,GAAC,OAAIK,EAAc,eAAgBL,EAAEU,OAAOC,SACzD7B,EAAa8B,KAAI,SAAAC,GAChB,SAAIA,IAAQA,EAAKjB,UAEb,4BAAQkB,IAAKD,EAAKjB,QAASe,MAAOE,EAAKhC,cACpCgC,EAAKjB,gBAUtB,yBAAKY,UAAU,SACb,yBAAKA,UAAU,SAAf,YACA,kBAAC,UAAD,CACEO,UAAWT,EACXK,MAAOzB,EAAOX,SACdyC,SAAU,SAAAC,GAAG,OAAIZ,EAAc,WAAYY,OAG9CV,GAAUA,EAAON,OAChB,kBAAC,UAAD,CACEC,QAASK,EAAON,MAChBiB,QAAS,kBAAM9B,OAAU+B,MAG7B,4BACEC,UAAWlC,EAAOX,SAClB8C,KAAK,SACLb,UAAS,4BAAuBJ,EAAe,aAAe,KAHhE","file":"static/js/4.22e4c5ab.chunk.js","sourcesContent":["import Neon from \"@cityofzion/neon-js\";\nimport { withFormik } from \"formik\";\nimport Form from \"./components/form\";\nimport * as Yup from \"yup\";\nimport { Nep2States } from \"../import-nep2\";\nimport {\n  CurrentWalletProps,\n  StoredWalletProps,\n} from \"../../../../../../../types\";\n\nconst ValidateSchema = Yup.object().shape({\n  password: Yup.string().required(\"Required\"),\n});\n\nconst SavedWallets = withFormik<\n  {\n    savedWallets: StoredWalletProps[];\n    onConnected: (wallet: CurrentWalletProps) => void;\n  },\n  Nep2States\n>({\n  mapPropsToValues: (props: any) => {\n    return {\n      encryptedKey:\n        props.savedWallets && props.savedWallets.length > 0\n          ? props.savedWallets[0].encryptedKey\n          : \"\",\n      password: \"\",\n    };\n  },\n  validationSchema: ValidateSchema,\n  handleSubmit: (values: Nep2States, { props, setSubmitting, setStatus }) => {\n    const account = Neon.create.account(values.encryptedKey);\n    account\n      .decrypt(values.password)\n      .then(account => {\n        setSubmitting(false);\n        props.onConnected({\n          provider: \"LOCAL\",\n          address: account.address,\n          privateKey: account.privateKey,\n          encryptedKey: account.encrypted,\n        });\n      })\n      .catch(e => {\n        setSubmitting(false);\n        setStatus({ error: e.message });\n      });\n  },\n})(Form);\n\nexport default SavedWallets;\n","import React from \"react\";\nimport { Form as FormikForm, FormikProps } from \"formik\";\nimport { Nep2States } from \"../../import-nep2\";\nimport PasswordInput from \"../../../components/password-input\";\nimport DisplayError from \"../../../components/display-error\";\nimport { StoredWalletProps } from \"../../../../../../../../types\";\n\nconst Form = (\n  props: { savedWallets: StoredWalletProps[] } & FormikProps<Nep2States>\n) => {\n  const {\n    savedWallets,\n    isSubmitting,\n    values,\n    setFieldValue,\n    submitForm,\n    status,\n    setStatus,\n  } = props;\n  return (\n    <FormikForm>\n      <div className=\"field\">\n        <div className=\"label\">Saved wallets</div>\n        <div className=\"control\">\n          <div className=\"select is-fullwidth\">\n            <select onBlur={e => setFieldValue(\"encryptedKey\", e.target.value)}>\n              {savedWallets.map(item => {\n                if (item && item.address) {\n                  return (\n                    <option key={item.address} value={item.encryptedKey}>\n                      {item.address}\n                    </option>\n                  );\n                }\n                return false;\n              })}\n            </select>\n          </div>\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"label\">Password</div>\n        <PasswordInput\n          onKeyDown={submitForm}\n          value={values.password}\n          onChange={val => setFieldValue(\"password\", val)}\n        />\n      </div>\n      {status && status.error && (\n        <DisplayError\n          message={status.error}\n          onClose={() => setStatus(undefined)}\n        />\n      )}\n      <button\n        disabled={!values.password}\n        type=\"submit\"\n        className={`button is-primary ${isSubmitting ? \"is-loading\" : \"\"}`}\n      >\n        Open\n      </button>\n    </FormikForm>\n  );\n};\n\nexport default Form;\n"],"sourceRoot":""}