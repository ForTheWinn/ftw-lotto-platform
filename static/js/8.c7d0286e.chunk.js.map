{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/backup.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/form.tsx"],"names":["BackupKeys","props","useState","isAgreed","setAgreement","account","onConnected","className","style","wordBreak","password","address","encryptedKey","privateKey","type","checked","onChange","disabled","onClick","provider","touched","errors","isSubmitting","values","setFieldValue","submitForm","status","setStatus","onKeyDown","val","value","error","message","onClose","undefined"],"mappings":"oKA0DeA,UA7CI,SAACC,GAA4B,IAAD,EACZC,oBAAS,GADG,mBACtCC,EADsC,KAC5BC,EAD4B,KAErCC,EAAyBJ,EAAzBI,QAASC,EAAgBL,EAAhBK,YACjB,OACE,6BACE,yBAAKC,UAAU,wBAAf,wFAIA,yBAAKA,UAAU,UAAUC,MAAO,CAAEC,UAAW,cAC3C,4BACE,yCAAeJ,EAAQK,UACvB,+CAAqBL,EAAQM,SAC7B,8CAAoBN,EAAQO,cAC5B,4CAAkBP,EAAQQ,cAG9B,6BACA,2BAAON,UAAU,YACf,2BACEO,KAAK,WACLC,QAASZ,EACTa,SAAU,kBAAMZ,GAAcD,MAJlC,iCAQA,6BACA,4BACEc,UAAWd,EACXI,UAAU,oBACVW,QAAS,kBACPZ,EAAY,CACVa,SAAU,QACVR,QAASN,EAAQM,QACjBC,aAAcP,EAAQO,aACtBC,WAAYR,EAAQQ,eAR1B,kB,iCCxCN,4DAYe,mBAACZ,GAAoD,IAEhEK,EASEL,EATFK,YACAc,EAQEnB,EARFmB,QACAC,EAOEpB,EAPFoB,OACAC,EAMErB,EANFqB,aACAC,EAKEtB,EALFsB,OACAC,EAIEvB,EAJFuB,cACAC,EAGExB,EAHFwB,WACAC,EAEEzB,EAFFyB,OACAC,EACE1B,EADF0B,UAGF,OADoBJ,EAAZlB,QAEC,kBAAC,UAAD,CAAYC,YAAaA,EAAaD,QAASkB,EAAOlB,UAG3D,kBAAC,IAAD,KACE,yBAAKE,UAAU,SACb,yBAAKA,UAAU,SAAf,2BACA,kBAAC,UAAD,CACEqB,UAAW,kBAAMH,GACjBT,SAAU,SAAAa,GAAG,OAAIL,EAAc,WAAYK,IAC3CC,MAAOP,EAAOb,WAEfW,EAAOX,UAAYU,EAAQV,UAC1B,yBAAKH,UAAU,kBAAkBc,EAAOX,WAG3CgB,GAAUA,EAAOK,OAChB,kBAAC,UAAD,CACEC,QAASN,EAAOK,MAChBE,QAAS,kBAAMN,OAAUO,MAG7B,4BACEjB,UAAWM,EAAOb,SAClBH,UAAS,4BAAuBe,EAAe,aAAe,KAFhE","file":"static/js/8.c7d0286e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface BackupKeysProps {\n  account: {\n    password: string;\n    address: string;\n    encryptedKey: string;\n    privateKey: string;\n  };\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nconst BackupKeys = (props: BackupKeysProps) => {\n  const [isAgreed, setAgreement] = useState(false);\n  const { account, onConnected } = props;\n  return (\n    <div>\n      <div className=\"notification is-info\">\n        You must save and backup the keys. If you lose them, you lose access to\n        your assets.\n      </div>\n      <div className=\"content\" style={{ wordBreak: \"break-all\" }}>\n        <ul>\n          <li>Password: {account.password}</li>\n          <li>Wallet address: {account.address}</li>\n          <li>Encrypted key: {account.encryptedKey}</li>\n          <li>Private key: {account.privateKey}</li>\n        </ul>\n      </div>\n      <hr />\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={isAgreed}\n          onChange={() => setAgreement(!isAgreed)}\n        />\n        &nbsp;&nbsp;I have saved the keys\n      </label>\n      <hr />\n      <button\n        disabled={!isAgreed}\n        className=\"button is-primary\"\n        onClick={() =>\n          onConnected({\n            provider: \"LOCAL\",\n            address: account.address,\n            encryptedKey: account.encryptedKey,\n            privateKey: account.privateKey,\n          })\n        }\n      >\n        Open wallet\n      </button>\n    </div>\n  );\n};\n\nexport default BackupKeys;\n","import React from \"react\";\nimport { Form as FormikForm, FormikProps } from \"formik\";\nimport BackupKeys from \"./backup\";\nimport { CreateWalletStates } from \"../index\";\nimport PasswordInput from \"../../../components/password-input\";\nimport DisplayError from \"../../../components/display-error\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface Props {\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nexport default (props: Props & FormikProps<CreateWalletStates>) => {\n  const {\n    onConnected,\n    touched,\n    errors,\n    isSubmitting,\n    values,\n    setFieldValue,\n    submitForm,\n    status,\n    setStatus,\n  } = props;\n  const { account } = values;\n  if (account) {\n    return <BackupKeys onConnected={onConnected} account={values.account} />;\n  } else {\n    return (\n      <FormikForm>\n        <div className=\"field\">\n          <div className=\"label\">Password for new wallet</div>\n          <PasswordInput\n            onKeyDown={() => submitForm}\n            onChange={val => setFieldValue(\"password\", val)}\n            value={values.password}\n          />\n          {errors.password && touched.password && (\n            <div className=\"help is-danger\">{errors.password}</div>\n          )}\n        </div>\n        {status && status.error && (\n          <DisplayError\n            message={status.error}\n            onClose={() => setStatus(undefined)}\n          />\n        )}\n        <button\n          disabled={!values.password}\n          className={`button is-primary ${isSubmitting ? \"is-loading\" : \"\"}`}\n        >\n          Create\n        </button>\n      </FormikForm>\n    );\n  }\n};\n"],"sourceRoot":""}