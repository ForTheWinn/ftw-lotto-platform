{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-nep2/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-nep2/components/form.tsx"],"names":["ImportNep2","withFormik","mapPropsToValues","props","encryptedKey","wallet","password","validate","values","errors","Neon","is","handleSubmit","setSubmitting","setStatus","account","create","undefined","decrypt","then","onConnected","provider","address","privateKey","encrypted","catch","e","error","message","Form","touched","isSubmitting","setFieldValue","submitForm","status","isValidSubmit","className","placeholder","value","onChange","target","isLoading","onKeyDown","val","onClose","type","disabled"],"mappings":"mIAAA,4CAeMA,EAAaC,YAAwC,CAEzDC,iBAAkB,SAAAC,GAChB,MAAO,CACLC,aACED,EAAME,QAAUF,EAAME,OAAOD,aACzBD,EAAME,OAAOD,aACb,GACNE,SAAU,KAGdC,SAAU,SAACC,GACT,IAAIC,EAA4B,GAUhC,OATKD,EAAOJ,eACVK,EAAOL,aAAe,YAEnBI,EAAOF,WACVG,EAAOH,SAAW,YAEfI,IAAKC,GAAGP,aAAaI,EAAOJ,gBAC/BK,EAAOL,aAAe,wCAEjBK,GAETG,aAAc,SAACJ,EAAD,GAA8D,IAAvCL,EAAsC,EAAtCA,MAAOU,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACnDC,EAAUL,IAAKM,OAAOD,QAAQP,EAAOJ,cAC3CU,OAAUG,GACVF,EACGG,QAAQV,EAAOF,UACfa,MAAK,SAAAJ,GACJF,GAAc,GACdV,EAAMiB,YAAY,CAChBC,SAAU,QACVC,QAASP,EAAQO,QACjBC,WAAYR,EAAQQ,WACpBnB,aAAcW,EAAQS,eAGzBC,OAAM,SAAAC,GACLb,GAAc,GACdC,EAAU,CACRa,MAAOD,EAAEE,eAzCA3B,CA6ChB4B,WAEY7B,a,iCC9Df,mDA8DeA,UAxDI,SAACG,GAAoC,IAEpD2B,EAQE3B,EARF2B,QACArB,EAOEN,EAPFM,OACAsB,EAME5B,EANF4B,aACAvB,EAKEL,EALFK,OACAwB,EAIE7B,EAJF6B,cACAC,EAGE9B,EAHF8B,WACAC,EAEE/B,EAFF+B,OACApB,EACEX,EADFW,UAEMV,EAA2BI,EAA3BJ,aAAcE,EAAaE,EAAbF,SAChB6B,EAAgB/B,GAAgBE,EACtC,OACE,kBAAC,IAAD,KACE,yBAAK8B,UAAU,SACb,yBAAKA,UAAU,SAAf,iBACA,2BACEA,UAAU,QACVC,YAAY,gBACZC,MAAOlC,EACPmC,SAAU,SAAAb,GAAC,OAAIM,EAAc,eAAgBN,EAAEc,OAAOF,UAEvD7B,EAAOL,cAAgB0B,EAAQ1B,cAC9B,yBAAKgC,UAAU,kBAAkB3B,EAAOL,eAI5C,yBAAKgC,UAAU,SACb,yBAAKA,UAAU,SAAf,YACA,kBAAC,UAAD,CACEK,UAAWV,EACXW,UAAW,mBAAOP,GAAgBF,KAClCM,SAAU,SAAAI,GAAG,OAAIX,EAAc,WAAYW,IAC3CL,MAAOhC,IAERG,EAAOH,UAAYwB,EAAQxB,UAC1B,yBAAK8B,UAAU,kBAAkB3B,EAAOH,cAG3C4B,IAAUA,EAAOP,QAChB,kBAAC,UAAD,CAAcC,QAASM,EAAOP,MAAOiB,QAAS,kBAAM9B,OAAUG,MAIhE,4BACE4B,KAAK,SACLC,UAAWX,EACXC,UAAS,4BAAuBL,EAAe,aAAe,KAHhE","file":"static/js/3.1f038d63.chunk.js","sourcesContent":["import Neon from \"@cityofzion/neon-js\";\nimport { withFormik, FormikErrors } from \"formik\";\nimport Form from \"./components/form\";\nimport { CurrentWalletProps } from \"../../../../../../../types\";\n\nexport interface Nep2States {\n  encryptedKey: string;\n  password: string;\n}\n\ninterface ImportNep2Props {\n  wallet?: CurrentWalletProps;\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nconst ImportNep2 = withFormik<ImportNep2Props, Nep2States>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      encryptedKey:\n        props.wallet && props.wallet.encryptedKey\n          ? props.wallet.encryptedKey\n          : \"\",\n      password: \"\",\n    };\n  },\n  validate: (values: Nep2States) => {\n    let errors: FormikErrors<any> = {};\n    if (!values.encryptedKey) {\n      errors.encryptedKey = \"Required\";\n    }\n    if (!values.password) {\n      errors.password = \"Required\";\n    }\n    if (!Neon.is.encryptedKey(values.encryptedKey)) {\n      errors.encryptedKey = \"It is not valid encrypted key format\";\n    }\n    return errors;\n  },\n  handleSubmit: (values: Nep2States, { props, setSubmitting, setStatus }) => {\n    const account = Neon.create.account(values.encryptedKey);\n    setStatus(undefined);\n    account\n      .decrypt(values.password)\n      .then(account => {\n        setSubmitting(false);\n        props.onConnected({\n          provider: \"LOCAL\",\n          address: account.address,\n          privateKey: account.privateKey,\n          encryptedKey: account.encrypted,\n        });\n      })\n      .catch(e => {\n        setSubmitting(false);\n        setStatus({\n          error: e.message,\n        });\n      });\n  },\n})(Form);\n\nexport default ImportNep2;\n","import React from \"react\";\nimport { Form as FormikForm, FormikProps } from \"formik\";\nimport { Nep2States } from \"../index\";\nimport PasswordInput from \"../../../components/password-input\";\nimport DisplayError from \"../../../components/display-error\";\n\nconst ImportNep2 = (props: FormikProps<Nep2States>) => {\n  const {\n    touched,\n    errors,\n    isSubmitting,\n    values,\n    setFieldValue,\n    submitForm,\n    status,\n    setStatus,\n  } = props;\n  const { encryptedKey, password } = values;\n  const isValidSubmit = encryptedKey && password;\n  return (\n    <FormikForm>\n      <div className=\"field\">\n        <div className=\"label\">Encrypted key</div>\n        <input\n          className=\"input\"\n          placeholder=\"Encrypted key\"\n          value={encryptedKey}\n          onChange={e => setFieldValue(\"encryptedKey\", e.target.value)}\n        />\n        {errors.encryptedKey && touched.encryptedKey && (\n          <div className=\"help is-danger\">{errors.encryptedKey}</div>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <div className=\"label\">Password</div>\n        <PasswordInput\n          isLoading={isSubmitting}\n          onKeyDown={() => (isValidSubmit ? submitForm() : false)}\n          onChange={val => setFieldValue(\"password\", val)}\n          value={password}\n        />\n        {errors.password && touched.password && (\n          <div className=\"help is-danger\">{errors.password}</div>\n        )}\n      </div>\n      {status && status.error ? (\n        <DisplayError message={status.error} onClose={() => setStatus(undefined)} />\n      ) : (\n        false\n      )}\n      <button\n        type=\"submit\"\n        disabled={!isValidSubmit}\n        className={`button is-primary ${isSubmitting ? \"is-loading\" : \"\"}`}\n      >\n        Open wallet\n      </button>\n    </FormikForm>\n  );\n};\n\nexport default ImportNep2;\n"],"sourceRoot":""}