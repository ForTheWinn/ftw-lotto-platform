{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-privatekey/components/encrypt-privatekey/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-privatekey/components/verify-privatekey/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-privatekey/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/backup.tsx"],"names":["EncryptPrivateKey","privateKey","onEncrypt","useState","password","setPassword","isLoading","setLoading","error","setError","encrypt","Neon","create","account","then","provider","encryptedKey","encrypted","address","catch","e","message","className","value","onChange","val","onKeyDown","onClose","disabled","onClick","type","VerifyPrivateKey","onVerify","setPrivateKey","verifyPrivatekey","is","wif","htmlFor","id","placeholder","target","keyCode","ImportPrivatekey","props","wallet","setWallet","BackupKeys","isAgreed","setAgreement","onConnected","style","wordBreak","checked"],"mappings":"wMA8EeA,UA/DW,SAAC,GAGG,IAF5BC,EAE2B,EAF3BA,WACAC,EAC2B,EAD3BA,UAC2B,EACKC,mBAAS,IADd,mBACpBC,EADoB,KACVC,EADU,OAEKF,oBAAS,GAFd,mBAEpBG,EAFoB,KAETC,EAFS,OAGDJ,mBAAS,IAHR,mBAGpBK,EAHoB,KAGbC,EAHa,KAIrBC,EAAU,WACdH,GAAW,GACKI,IAAKC,OAAOC,QAAQZ,GAEjCS,QAAQN,GACRU,MAAK,SAAAD,GACJN,GAAW,GACXL,EAAU,CACRa,SAAU,QACVC,aAAcH,EAAQI,UACtBC,QAASL,EAAQK,QACjBjB,aACAG,gBAGHe,OAAM,SAAAC,GACLX,EAASW,EAAEC,SACXd,GAAW,OAIjB,OACE,oCACE,yBAAKe,UAAU,SACb,yBAAKA,UAAU,SAAf,YACA,kBAAC,UAAD,CACEC,MAAOnB,EACPoB,SAAU,SAAAC,GAAG,OAAIpB,EAAYoB,IAC7BC,UAAW,WACLtB,GACFM,QAMR,yBAAKY,UAAU,qBACb,4BACE,4EACA,oFAGJ,6BACCd,GAAS,kBAAC,UAAD,CAAca,QAASb,EAAOmB,QAAS,kBAAMlB,EAAS,OAChE,4BACEmB,UAAWxB,EACXyB,QAASnB,EACToB,KAAK,SACLR,UAAS,4BAAuBhB,EAAY,aAAe,KAJ7D,e,2FCdSyB,UA5CU,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,SAAsC,EAC5B7B,mBAAS,IADmB,mBACzDF,EADyD,KAC7CgC,EAD6C,OAEtC9B,mBAAS,IAF6B,mBAEzDK,EAFyD,KAElDC,EAFkD,KAG1DyB,EAAmB,WACnBjC,IACEU,IAAKwB,GAAGlC,WAAWA,IAAeU,IAAKwB,GAAGC,IAAInC,GAChD+B,EAAS/B,GAETQ,EAAS,4DAKf,OACE,oCACE,yBAAKa,UAAU,SACb,2BAAOe,QAAQ,aAAaf,UAAU,SAAtC,eAGA,2BACEgB,GAAG,aACHhB,UAAU,QACViB,YAAY,cACZhB,MAAOtB,EACPuB,SAAU,SAAAJ,GAAC,OAAIa,EAAcb,EAAEoB,OAAOjB,QACtCG,UAAW,SAAAN,GACS,KAAdA,EAAEqB,SAAkBxC,GACtBiC,QAKP1B,GAAS,kBAAC,UAAD,CAAca,QAASb,EAAOmB,QAAS,kBAAMlB,EAAS,OAChE,4BACEoB,QAASK,EACTN,UAAW3B,EACXqB,UAAS,qBAHX,8B,8FCTSoB,UA1BU,SAACC,GAEnB,IAAD,EACgCxC,mBAAS,IADzC,mBACGF,EADH,KACegC,EADf,OAEwB9B,qBAFxB,mBAEGyC,EAFH,KAEWC,EAFX,KAGJ,OAAID,EAGA,kBAAC,UAAD,iBAAgBD,EAAhB,CAAuB9B,QAAS+B,KAIlC,oCACG3C,EAEC,kBAAC,UAAD,CACEA,WAAYA,EACZC,UAAW,SAAA0C,GAAM,OAAIC,EAAUD,MAGjC,kBAAC,UAAD,CAAkBZ,SAAU,SAAA/B,GAAU,OAAIgC,EAAchC,S,mECgCjD6C,UA7CI,SAACH,GAA4B,IAAD,EACZxC,oBAAS,GADG,mBACtC4C,EADsC,KAC5BC,EAD4B,KAErCnC,EAAyB8B,EAAzB9B,QAASoC,EAAgBN,EAAhBM,YACjB,OACE,6BACE,yBAAK3B,UAAU,wBAAf,wFAIA,yBAAKA,UAAU,UAAU4B,MAAO,CAAEC,UAAW,cAC3C,4BACE,yCAAetC,EAAQT,UACvB,+CAAqBS,EAAQK,SAC7B,8CAAoBL,EAAQG,cAC5B,4CAAkBH,EAAQZ,cAG9B,6BACA,2BAAOqB,UAAU,YACf,2BACEQ,KAAK,WACLsB,QAASL,EACTvB,SAAU,kBAAMwB,GAAcD,MAJlC,iCAQA,6BACA,4BACEnB,UAAWmB,EACXzB,UAAU,oBACVO,QAAS,kBACPoB,EAAY,CACVlC,SAAU,QACVG,QAASL,EAAQK,QACjBF,aAAcH,EAAQG,aACtBf,WAAYY,EAAQZ,eAR1B","file":"static/js/0.860dee62.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Neon from \"@cityofzion/neon-js\";\nimport PasswordInput from \"../../../../components/password-input\";\nimport DisplayError from \"../../../../components/display-error\";\nimport { CurrentWalletProps } from \"../../../../../../../../../types\";\n\ninterface NewWalletProps extends CurrentWalletProps {\n  password: string;\n}\n\ninterface VerifyPrivateKeyProps {\n  privateKey: string;\n  onEncrypt: (wallet: NewWalletProps) => void;\n}\n\nconst EncryptPrivateKey = ({\n  privateKey,\n  onEncrypt,\n}: VerifyPrivateKeyProps) => {\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const encrypt = () => {\n    setLoading(true);\n    const account = Neon.create.account(privateKey);\n    account\n      .encrypt(password)\n      .then(account => {\n        setLoading(false);\n        onEncrypt({\n          provider: \"LOCAL\",\n          encryptedKey: account.encrypted,\n          address: account.address,\n          privateKey,\n          password,\n        });\n      })\n      .catch(e => {\n        setError(e.message);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <div className=\"field\">\n        <div className=\"label\">Password</div>\n        <PasswordInput\n          value={password}\n          onChange={val => setPassword(val)}\n          onKeyDown={() => {\n            if (password) {\n              encrypt();\n            }\n          }}\n        />\n      </div>\n\n      <div className=\"is-size-7 content\">\n        <ul>\n          <li>Password must be at least 6 characters long.</li>\n          <li>You will need this password to unlock your wallet.</li>\n        </ul>\n      </div>\n      <hr />\n      {error && <DisplayError message={error} onClose={() => setError(\"\")} />}\n      <button\n        disabled={!password}\n        onClick={encrypt}\n        type=\"button\"\n        className={`button is-primary ${isLoading ? \"is-loading\" : \"\"}`}\n      >\n        Encrypt!\n      </button>\n    </>\n  );\n};\n\nexport default EncryptPrivateKey;\n","import React, { useState } from \"react\";\nimport Neon from \"@cityofzion/neon-js\";\nimport DisplayError from \"../../../../components/display-error\";\n\ninterface VerifyPrivateKeyProps {\n  onVerify: (privateKey: string) => void;\n}\n\nconst VerifyPrivateKey = ({ onVerify }: VerifyPrivateKeyProps) => {\n  const [privateKey, setPrivateKey] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const verifyPrivatekey = () => {\n    if (privateKey) {\n      if (Neon.is.privateKey(privateKey) || Neon.is.wif(privateKey)) {\n        onVerify(privateKey);\n      } else {\n        setError(\"Please check your private key. It it not a valid type.\");\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"field\">\n        <label htmlFor=\"privatekey\" className=\"label\">\n          Private key\n        </label>\n        <input\n          id=\"privatekey\"\n          className=\"input\"\n          placeholder=\"Private Key\"\n          value={privateKey}\n          onChange={e => setPrivateKey(e.target.value)}\n          onKeyDown={e => {\n            if (e.keyCode === 13 && privateKey) {\n              verifyPrivatekey();\n            }\n          }}\n        />\n      </div>\n      {error && <DisplayError message={error} onClose={() => setError(\"\")} />}\n      <button\n        onClick={verifyPrivatekey}\n        disabled={!privateKey}\n        className={`button is-primary`}\n      >\n        Verify your private key\n      </button>\n    </>\n  );\n};\n\nexport default VerifyPrivateKey;\n","import React, { useState } from \"react\";\nimport BackupKeys from \"../create-wallet/components/backup\";\nimport VerifyPrivateKey from \"./components/verify-privatekey\";\nimport EncryptPrivateKey from \"./components/encrypt-privatekey\";\nimport { CurrentWalletProps } from \"../../../../../../../types\";\n\nconst ImportPrivatekey = (props: {\n  onConnected: (wallet: CurrentWalletProps) => void;\n}) => {\n  const [privateKey, setPrivateKey] = useState(\"\");\n  const [wallet, setWallet] = useState<CurrentWalletProps>();\n  if (wallet) {\n    return (\n      // @ts-ignore\n      <BackupKeys {...props} account={wallet} />\n    );\n  }\n  return (\n    <>\n      {privateKey ? (\n        // @ts-ignore\n        <EncryptPrivateKey\n          privateKey={privateKey}\n          onEncrypt={wallet => setWallet(wallet)}\n        />\n      ) : (\n        <VerifyPrivateKey onVerify={privateKey => setPrivateKey(privateKey)} />\n      )}\n    </>\n  );\n};\n\nexport default ImportPrivatekey;\n","import React, { useState } from \"react\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface BackupKeysProps {\n  account: {\n    password: string;\n    address: string;\n    encryptedKey: string;\n    privateKey: string;\n  };\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nconst BackupKeys = (props: BackupKeysProps) => {\n  const [isAgreed, setAgreement] = useState(false);\n  const { account, onConnected } = props;\n  return (\n    <div>\n      <div className=\"notification is-info\">\n        You must save and backup the keys. If you lose them, you lose access to\n        your assets.\n      </div>\n      <div className=\"content\" style={{ wordBreak: \"break-all\" }}>\n        <ul>\n          <li>Password: {account.password}</li>\n          <li>Wallet address: {account.address}</li>\n          <li>Encrypted key: {account.encryptedKey}</li>\n          <li>Private key: {account.privateKey}</li>\n        </ul>\n      </div>\n      <hr />\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={isAgreed}\n          onChange={() => setAgreement(!isAgreed)}\n        />\n        &nbsp;&nbsp;I have saved the keys\n      </label>\n      <hr />\n      <button\n        disabled={!isAgreed}\n        className=\"button is-primary\"\n        onClick={() =>\n          onConnected({\n            provider: \"LOCAL\",\n            address: account.address,\n            encryptedKey: account.encryptedKey,\n            privateKey: account.privateKey,\n          })\n        }\n      >\n        Open wallet\n      </button>\n    </div>\n  );\n};\n\nexport default BackupKeys;\n"],"sourceRoot":""}