{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-file/components/import-button/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/saved-wallets/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/import-file/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/saved-wallets/components/form.tsx"],"names":["ImportButton","onImport","useState","error","setError","message","onClose","className","onChange","e","target","files","length","reader","FileReader","onload","event","jsonObj","JSON","parse","result","accounts","wallets","map","acc","address","encryptedKey","key","readAsText","type","accept","ValidateSchema","Yup","shape","password","required","SavedWallets","withFormik","mapPropsToValues","props","savedWallets","validationSchema","handleSubmit","values","setSubmitting","setStatus","Neon","create","account","decrypt","then","onConnected","provider","privateKey","encrypted","catch","Form","ImportFile","setWallets","isSubmitting","setFieldValue","submitForm","status","onBlur","value","item","onKeyDown","val","undefined","disabled"],"mappings":"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","file":"static/js/1.c850f98e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport DisplayError from \"../../../../components/display-error\";\n\ninterface WalletProps {\n  encryptedKey: string;\n  address: string;\n}\n\ninterface Nep6 {\n  address: string;\n  label: string;\n  isDefault: boolean;\n  lock: boolean;\n  key: string;\n  contract: {};\n  \"extra?\": boolean;\n}\n\ninterface ImportButtonProps {\n  onImport: (wallets: WalletProps[]) => void;\n}\n\nconst ImportButton = ({ onImport }: ImportButtonProps) => {\n  const [error, setError] = useState(\"\");\n  const handleImport = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      try {\n        // eslint-disable-next-line no-undef\n        const reader = new FileReader();\n        reader.onload = (event: any) => {\n          const jsonObj = JSON.parse(event.target.result);\n          if (jsonObj.accounts && jsonObj.accounts.length) {\n            const wallets = jsonObj.accounts.map((acc: Nep6) => {\n              return {\n                address: acc.address,\n                encryptedKey: acc.key,\n              };\n            });\n            onImport(wallets);\n          } else {\n            setError(\"Cannot find account in the file\");\n          }\n        };\n        reader.readAsText(e.target.files[0]);\n        return false;\n      } catch (e) {\n        setError(e.message);\n      }\n    }\n  };\n  return (\n    <>\n      {error && <DisplayError message={error} onClose={() => setError(\"\")} />}\n      <div className=\"file\">\n        <label className=\"file-label\">\n          <input\n            onChange={handleImport}\n            className=\"file-input\"\n            type=\"file\"\n            accept=\".json,application/json\"\n          />\n          <span className=\"file-cta button is-primary\">\n            <span className=\"file-label\">Select wallet file</span>\n          </span>\n        </label>\n      </div>\n    </>\n  );\n};\n\nexport default ImportButton;\n","import Neon from \"@cityofzion/neon-js\";\nimport { withFormik } from \"formik\";\nimport Form from \"./components/form\";\nimport * as Yup from \"yup\";\nimport { Nep2States } from \"../import-nep2\";\nimport {\n  CurrentWalletProps,\n  StoredWalletProps,\n} from \"../../../../../../../types\";\n\nconst ValidateSchema = Yup.object().shape({\n  password: Yup.string().required(\"Required\"),\n});\n\nconst SavedWallets = withFormik<\n  {\n    savedWallets: StoredWalletProps[];\n    onConnected: (wallet: CurrentWalletProps) => void;\n  },\n  Nep2States\n>({\n  mapPropsToValues: (props: any) => {\n    return {\n      encryptedKey:\n        props.savedWallets && props.savedWallets.length > 0\n          ? props.savedWallets[0].encryptedKey\n          : \"\",\n      password: \"\",\n    };\n  },\n  validationSchema: ValidateSchema,\n  handleSubmit: (values: Nep2States, { props, setSubmitting, setStatus }) => {\n    const account = Neon.create.account(values.encryptedKey);\n    account\n      .decrypt(values.password)\n      .then(account => {\n        setSubmitting(false);\n        props.onConnected({\n          provider: \"LOCAL\",\n          address: account.address,\n          privateKey: account.privateKey,\n          encryptedKey: account.encrypted,\n        });\n      })\n      .catch(e => {\n        setSubmitting(false);\n        setStatus({ error: e.message });\n      });\n  },\n})(Form);\n\nexport default SavedWallets;\n","import React, { useState } from \"react\";\nimport ImportButton from \"./components/import-button\";\nimport SavedWallets from \"../saved-wallets\";\nimport {\n  CurrentWalletProps,\n  StoredWalletProps,\n} from \"../../../../../../../types\";\n\ninterface ImportFileProps {\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nconst ImportFile = (props: ImportFileProps) => {\n  const { onConnected } = props;\n  const [wallets, setWallets] = useState<StoredWalletProps[]>([]);\n\n  return (\n    <>\n      {wallets && wallets.length ? (\n        <SavedWallets onConnected={onConnected} savedWallets={wallets} />\n      ) : (\n        <ImportButton onImport={setWallets} />\n      )}\n    </>\n  );\n};\n\nexport default ImportFile;\n","import React from \"react\";\nimport { Form as FormikForm, FormikProps } from \"formik\";\nimport { Nep2States } from \"../../import-nep2\";\nimport PasswordInput from \"../../../components/password-input\";\nimport DisplayError from \"../../../components/display-error\";\nimport { StoredWalletProps } from \"../../../../../../../../types\";\n\nconst Form = (\n  props: { savedWallets: StoredWalletProps[] } & FormikProps<Nep2States>\n) => {\n  const {\n    savedWallets,\n    isSubmitting,\n    values,\n    setFieldValue,\n    submitForm,\n    status,\n    setStatus,\n  } = props;\n  return (\n    <FormikForm>\n      <div className=\"field\">\n        <div className=\"label\">Saved wallets</div>\n        <div className=\"control\">\n          <div className=\"select is-fullwidth\">\n            <select onBlur={e => setFieldValue(\"encryptedKey\", e.target.value)}>\n              {savedWallets.map(item => {\n                if (item && item.address) {\n                  return (\n                    <option key={item.address} value={item.encryptedKey}>\n                      {item.address}\n                    </option>\n                  );\n                }\n                return false;\n              })}\n            </select>\n          </div>\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"label\">Password</div>\n        <PasswordInput\n          onKeyDown={submitForm}\n          value={values.password}\n          onChange={val => setFieldValue(\"password\", val)}\n        />\n      </div>\n      {status && status.error && (\n        <DisplayError\n          message={status.error}\n          onClose={() => setStatus(undefined)}\n        />\n      )}\n      <button\n        disabled={!values.password}\n        type=\"submit\"\n        className={`button is-primary ${isSubmitting ? \"is-loading\" : \"\"}`}\n      >\n        Open\n      </button>\n    </FormikForm>\n  );\n};\n\nexport default Form;\n"],"sourceRoot":""}