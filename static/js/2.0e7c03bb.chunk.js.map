{"version":3,"sources":["packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/index.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/backup.tsx","packages/wallet/scenes/wallet/components/wallets/nep2-wallet/scenes/create-wallet/components/form.tsx"],"names":["ValidateSchema","Yup","shape","password","required","CreateWallet","withFormik","mapPropsToValues","account","validationSchema","handleSubmit","values","setFieldValue","setSubmitting","setStatus","Neon","create","encrypt","then","address","encryptedKey","encrypted","privateKey","catch","e","error","message","Form","BackupKeys","props","useState","isAgreed","setAgreement","onConnected","className","style","wordBreak","type","checked","onChange","disabled","onClick","provider","touched","errors","isSubmitting","submitForm","status","onKeyDown","val","value","onClose","undefined"],"mappings":"oIAAA,oDAcMA,EAAiBC,MAAaC,MAAM,CACxCC,SAAUF,MAAaG,SAAS,cAG5BC,EAAeC,YAAsC,CACzDC,iBAAkB,WAChB,MAAO,CACLJ,SAAU,GACVK,QAAS,OAGbC,iBAAkBT,EAClBU,aAAc,SACZC,EADY,GAGR,IADFC,EACC,EADDA,cAAeC,EACd,EADcA,cAAeC,EAC7B,EAD6BA,UAEhBC,IAAKC,OAAOR,QAAQ,IAEjCS,QAAQN,EAAOR,UACfe,MAAK,SAAAV,GACJK,GAAc,GACdD,EAAc,UAAW,CACvBO,QAASX,EAAQW,QACjBC,aAAcZ,EAAQa,UACtBC,WAAYd,EAAQc,WACpBnB,SAAUQ,EAAOR,cAGpBoB,OAAM,SAAAC,GACLX,GAAc,GACdC,EAAU,CACRW,MAAOD,EAAEE,eA3BEpB,CA+BlBqB,WAEYtB,a,mECOAuB,UA7CI,SAACC,GAA4B,IAAD,EACZC,oBAAS,GADG,mBACtCC,EADsC,KAC5BC,EAD4B,KAErCxB,EAAyBqB,EAAzBrB,QAASyB,EAAgBJ,EAAhBI,YACjB,OACE,6BACE,yBAAKC,UAAU,wBAAf,wFAIA,yBAAKA,UAAU,UAAUC,MAAO,CAAEC,UAAW,cAC3C,4BACE,yCAAe5B,EAAQL,UACvB,+CAAqBK,EAAQW,SAC7B,8CAAoBX,EAAQY,cAC5B,4CAAkBZ,EAAQc,cAG9B,6BACA,2BAAOY,UAAU,YACf,2BACEG,KAAK,WACLC,QAASP,EACTQ,SAAU,kBAAMP,GAAcD,MAJlC,iCAQA,6BACA,4BACES,UAAWT,EACXG,UAAU,oBACVO,QAAS,kBACPR,EAAY,CACVS,SAAU,QACVvB,QAASX,EAAQW,QACjBC,aAAcZ,EAAQY,aACtBE,WAAYd,EAAQc,eAR1B,kB,iCCxCN,4DAYe,mBAACO,GAAoD,IAEhEI,EASEJ,EATFI,YACAU,EAQEd,EARFc,QACAC,EAOEf,EAPFe,OACAC,EAMEhB,EANFgB,aACAlC,EAKEkB,EALFlB,OACAC,EAIEiB,EAJFjB,cACAkC,EAGEjB,EAHFiB,WACAC,EAEElB,EAFFkB,OACAjC,EACEe,EADFf,UAGF,OADoBH,EAAZH,QAEC,kBAAC,UAAD,CAAYyB,YAAaA,EAAazB,QAASG,EAAOH,UAG3D,kBAAC,IAAD,KACE,yBAAK0B,UAAU,SACb,yBAAKA,UAAU,SAAf,2BACA,kBAAC,UAAD,CACEc,UAAW,kBAAMF,GACjBP,SAAU,SAAAU,GAAG,OAAIrC,EAAc,WAAYqC,IAC3CC,MAAOvC,EAAOR,WAEfyC,EAAOzC,UAAYwC,EAAQxC,UAC1B,yBAAK+B,UAAU,kBAAkBU,EAAOzC,WAG3C4C,GAAUA,EAAOtB,OAChB,kBAAC,UAAD,CACEC,QAASqB,EAAOtB,MAChB0B,QAAS,kBAAMrC,OAAUsC,MAG7B,4BACEZ,UAAW7B,EAAOR,SAClB+B,UAAS,4BAAuBW,EAAe,aAAe,KAFhE","file":"static/js/2.0e7c03bb.chunk.js","sourcesContent":["import Neon from \"@cityofzion/neon-js\";\nimport { withFormik } from \"formik\";\nimport Form from \"./components/form\";\nimport * as Yup from \"yup\";\nimport { CurrentWalletProps } from \"../../../../../../../types\";\nexport interface Props {\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nexport interface CreateWalletStates {\n  password: string;\n  account: any;\n}\n\nconst ValidateSchema = Yup.object().shape({\n  password: Yup.string().required(\"Required\"),\n});\n\nconst CreateWallet = withFormik<Props, CreateWalletStates>({\n  mapPropsToValues: () => {\n    return {\n      password: \"\",\n      account: null,\n    };\n  },\n  validationSchema: ValidateSchema,\n  handleSubmit: (\n    values: CreateWalletStates,\n    { setFieldValue, setSubmitting, setStatus }\n  ) => {\n    const account = Neon.create.account(\"\");\n    account\n      .encrypt(values.password)\n      .then(account => {\n        setSubmitting(false);\n        setFieldValue(\"account\", {\n          address: account.address,\n          encryptedKey: account.encrypted,\n          privateKey: account.privateKey,\n          password: values.password,\n        });\n      })\n      .catch(e => {\n        setSubmitting(false);\n        setStatus({\n          error: e.message,\n        });\n      });\n  },\n})(Form);\n\nexport default CreateWallet;\n","import React, { useState } from \"react\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface BackupKeysProps {\n  account: {\n    password: string;\n    address: string;\n    encryptedKey: string;\n    privateKey: string;\n  };\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nconst BackupKeys = (props: BackupKeysProps) => {\n  const [isAgreed, setAgreement] = useState(false);\n  const { account, onConnected } = props;\n  return (\n    <div>\n      <div className=\"notification is-info\">\n        You must save and backup the keys. If you lose them, you lose access to\n        your assets.\n      </div>\n      <div className=\"content\" style={{ wordBreak: \"break-all\" }}>\n        <ul>\n          <li>Password: {account.password}</li>\n          <li>Wallet address: {account.address}</li>\n          <li>Encrypted key: {account.encryptedKey}</li>\n          <li>Private key: {account.privateKey}</li>\n        </ul>\n      </div>\n      <hr />\n      <label className=\"checkbox\">\n        <input\n          type=\"checkbox\"\n          checked={isAgreed}\n          onChange={() => setAgreement(!isAgreed)}\n        />\n        &nbsp;&nbsp;I have saved the keys\n      </label>\n      <hr />\n      <button\n        disabled={!isAgreed}\n        className=\"button is-primary\"\n        onClick={() =>\n          onConnected({\n            provider: \"LOCAL\",\n            address: account.address,\n            encryptedKey: account.encryptedKey,\n            privateKey: account.privateKey,\n          })\n        }\n      >\n        Open wallet\n      </button>\n    </div>\n  );\n};\n\nexport default BackupKeys;\n","import React from \"react\";\nimport { Form as FormikForm, FormikProps } from \"formik\";\nimport BackupKeys from \"./backup\";\nimport { CreateWalletStates } from \"../index\";\nimport PasswordInput from \"../../../components/password-input\";\nimport DisplayError from \"../../../components/display-error\";\nimport { CurrentWalletProps } from \"../../../../../../../../types\";\n\ninterface Props {\n  onConnected: (account: CurrentWalletProps) => void;\n}\n\nexport default (props: Props & FormikProps<CreateWalletStates>) => {\n  const {\n    onConnected,\n    touched,\n    errors,\n    isSubmitting,\n    values,\n    setFieldValue,\n    submitForm,\n    status,\n    setStatus,\n  } = props;\n  const { account } = values;\n  if (account) {\n    return <BackupKeys onConnected={onConnected} account={values.account} />;\n  } else {\n    return (\n      <FormikForm>\n        <div className=\"field\">\n          <div className=\"label\">Password for new wallet</div>\n          <PasswordInput\n            onKeyDown={() => submitForm}\n            onChange={val => setFieldValue(\"password\", val)}\n            value={values.password}\n          />\n          {errors.password && touched.password && (\n            <div className=\"help is-danger\">{errors.password}</div>\n          )}\n        </div>\n        {status && status.error && (\n          <DisplayError\n            message={status.error}\n            onClose={() => setStatus(undefined)}\n          />\n        )}\n        <button\n          disabled={!values.password}\n          className={`button is-primary ${isSubmitting ? \"is-loading\" : \"\"}`}\n        >\n          Create\n        </button>\n      </FormikForm>\n    );\n  }\n};\n"],"sourceRoot":""}